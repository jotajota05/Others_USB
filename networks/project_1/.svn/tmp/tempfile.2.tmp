#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <netdb.h>
#include <ctype.h>

#include "sock_utils.h"
#include "marzullo2.c"

int main (int argc, char *argv[]) {

  struct sockaddr_in direccion, servidor, emisor;
  struct in_addr direccion_host;
  struct hostent *host;
  socklen_t longDireccion = sizeof(struct sockaddr_in);
  int sock, longt, n, longt_emisor, conexion, puerto, num_preg, opcion_ene;
  int tiempo_tcp, tiempo_udp, i, j, k, c;
  char buf[256], buffer[256], subStr[2], *serv, *protocolo; 

  
  if (argc != 8 && argc != 9) error("Parametros incompletos o incorrectos");

  opterr = 0;
  opcion_ene = 0;
     
  while ((c = getopt (argc, argv, "s:p:v:tun")) != -1)
    switch (c) {
    case 's':
      substring(0,1,optarg,subStr,sizeof(subStr));
      if (!strcmp(subStr,"-")) error("Ingrese el Nombre o direccion del servidor luego de -s");
      serv = optarg;
      break;
    case 'p':
      substring(0,1,optarg,subStr,sizeof(subStr));
      if (!strcmp(subStr,"-")) error("Ingrese el numero de puerto luego de -p");
      puerto = atoi(optarg);
      break;
    case 'v':
      substring(0,1,optarg,subStr,sizeof(subStr));
      if (!strcmp(subStr,"-")) error("Ingrese el numero de preguntas luego de -v");
      num_preg = atoi(optarg);
      break;
    case 't':
      protocolo = "-t";
      break;
    case 'u':
      protocolo = "-u";
      break;
    case 'n':
      opcion_ene = 1;
      break;
    case '?':
      error("Opcion invalida");
      break;
    default:
      abort();
      break;
    }

  printf("Servidor = %s\n",serv);
  printf("Puerto = %d\n",puerto);
  printf("Num_preg = %d\n",num_preg);
  printf("Protocolo = %s\n",protocolo);
  printf("Opcion = %d\n",opcion_ene);
  
  ////////////////////////////////////////////////////////////
  //////////////Se realiza la conexion por TCP////////////////
  ///////////////////////////////////////////////////////////

  if (!strcmp(protocolo,"-t")) {
      
    //Se intenta convertir el argumento en una direccion, para luego buscar el host, si no, se busca por nombre
    if (inet_aton(serv, &direccion_host))
      host = gethostbyaddr((char *)&direccion_host, sizeof(direccion_host), AF_INET);
    else
      host = gethostbyname(serv);

    if (!host) {
      herror("Error al buscar el Host");
      exit(1);
    }
	
    //Se crea el socket de comunicacion
    if(( sock = socket(PF_INET, SOCK_STREAM, 0)) < 0) error("Error al crear el Socket");
    
    direccion.sin_family = AF_INET;
    direccion.sin_port = htons(puerto);
    
    // Toma la primera direccion IP asociada a este hostname
    memcpy(&direccion.sin_addr, host->h_addr_list[0], sizeof(direccion.sin_addr));

    //Se conecta al servidor
    conexion = connect(sock, (struct sockaddr *)&direccion, sizeof(direccion));
    if (conexion < 0) error("Error al conectar con el socket");

    ////////////////////////////////////
    //////Aqui se hace la peticion//////
    {
      for (j = 0; j < 5; j++) {
	write(sock,"Dame la Hora",256);
	read(sock,&tiempo_tcp,256);
	printf("Tiempo = %d\n",tiempo_tcp);
      }

    }

    //Se cierra el socket
    close(sock);

    ///////////////////////////////////

  ////////////////////////////////////////////////////////////
  //////////////Se realiza la conexion por UDP////////////////
  ///////////////////////////////////////////////////////////


  } else if (!strcmp(protocolo,"-u")) {

    //Se crea el socket de comunicacion
    sock = socket(AF_INET,SOCK_DGRAM,0);
    if (sock < 0) error("Error al crear el socket!");

    servidor.sin_family = AF_INET;

    host = gethostbyname(serv);
    if (host == 0) error("Error! Host desconocido"); 

    bcopy((char *)host->h_addr,(char *)&servidor.sin_addr,host->h_length);

    servidor.sin_port = htons(puerto);
    longt = sizeof(struct sockaddr_in);
      
    //////////////////////////////////////////////////////////
    //////Aqui se hace la peticion con sendto y recvfrom//////
    {
        
   	////Creando la Lista de tuplas////
    	int it = atoi(argv[6]);
    	int lista[it*2][2] ;
		int i = 0;
		int a;
		for(i= 0; i < it ; i++){
			a = 0;
			lista[a][0]  = time(NULL);
			lista[a][1] = -1;
			a++;
			/*///Sendto///Recvfrom////*/
			{	
      			for (k = 0; k < atoi(argv[6]); k++) {
					bzero(buffer,256);
					n=sendto(sock,"Dame la hora!", 256,0,(struct sockaddr *)&servidor,longt);
					if (n < 0) error("Sendto");
					n = recvfrom(sock,buffer,256,0,(struct sockaddr *)&emisor, &longt);
					if (n < 0) error("recvfrom");
					printf("Tiempo = %d\n",atoi(buffer));
    			}	
			 }
			 int hh;
			 for(hh = 0; hh < 99999999;hh++){
			 hh++;	
			}
			lista[a][0]  = time(NULL);
			lista[a][1] = 1;
			a++;
		 }
		 struct Par * par = malloc(sizeof(struct Par));
		 par = Marzullo(it,lista);
		 printf("el intervalo %d    %d\n", par->a , par->b);


    }

    //Se cierra el socket
    close(sock);

    /////////////////////////////////////////////////////

  }

  return 0;

}
